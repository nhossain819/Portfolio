"""
DESCRIPTION:
The following is a sample of my Pandas skillset.

Each function or group of functions is seperated by a single line comment of X's.
Each function or group of functions begin with a multi-line comment describing the functions purpose.

These functions are the result of self-teaching as well as practice exercises found through W3resource.

SAMPLE DATASET CREDIT: The dataset used here is a sample dataset found on W3resource and 
originating from https://github.com/mwaskom/seaborn-data
"""




#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

import pandas as pd



df1 = pd.DataFrame({
  'Product ID': [1, 2, 3, 4],
  'Product Name': [ 't-shirt', 't-shirt', 'skirt', 'skirt'],
  'Color': [ 'blue', 'green', 'red', 'black']
})



"""
pd.set_option('display.max_rows', 50)
pd.set_option('display.max_columns', 50)
diamonds = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/diamonds.csv')
print("First 5 rows:")
print(diamonds.head())
"""

df = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/diamonds.csv')

#the first 5 rows
#print(df.head(5))

#view information about the df
#print(df.info())


#select specific rows by row number (starts from 0)
#print(df.iloc[50:75])

"""
#select specific columns
carat_cut = df[['carat' , 'cut']]
print(carat_cut.head())

#select specific rows and columns, notice double brackets
print(carat_cut.iloc[[5, 10, 15]])
"""
#
"""
print(df.head())

best_cut = df[df.cut == 'Ideal']
print(best_cut.head())
"""
#
"""
number_of_columns = len(df.axes[1])
number_of_rows = len(df.axes[0])

print(number_of_columns)
print(number_of_rows)
"""
#
"""
missing_clarity = df[df['clarity'].isnull()]
print(missing_clarity)
"""
#
"""
rows15to20 = df.iloc[15:21]
print(rows15to20)
"""
#
"""
carat_between25and30 = df[(df.carat > 0.25) & (df.carat <= 0.3)]
print(carat_between25and30.head())
"""

# descriptive statistics by specific column
"""
average_carat = df.carat.mean()
max_carat = df.carat.max()
min_carat = df.carat.min()
median_carat = df.carat.median()
sum_carat = df.carat.sum()

print(max_carat)
print(min_carat)
print(average_carat)
print(median_carat)
print(sum_carat)
"""

#average carat of each cut style
#all hard coded 
"""
all_cuts = pd.unique(df.cut)
print(all_cuts)

idealcut = df[df.cut == 'Ideal']
idealcut_meancarat = idealcut.carat.mean()
print(round(idealcut_meancarat, 4))

premiumcut = df[df.cut == 'Premium']
goodcut = df[df.cut == 'Good']
verygoodcut = df[df.cut == 'Very Good']
faircut = df[df.cut == 'Fair']

premiumcut_meancarat = premiumcut.carat.mean()
goodcut_meancarat = goodcut.carat.mean()
verygoodcut_meancarat = verygoodcut.carat.mean()
faircut_meancarat = faircut.carat.mean()

print(premiumcut_meancarat)
print(goodcut_meancarat)
print(verygoodcut_meancarat)
print(faircut_meancarat)
"""
#average carat of each cut style
#uses a for loop
"""
list_of_all_cuts = list(pd.unique(df.cut))

for cut_type in list_of_all_cuts:
    cut_subset = df[df.cut == cut_type]
    cut_subset_meancarat = cut_subset.carat.mean()
    print('Mean Carat of ' + str(cut_type) + ' Cut ' + str(round(cut_subset_meancarat , 5)))
 """
#average carat of each cut style
#uses a group by 
"""
carat_cut = df[['carat' , 'cut']]

mean_carat_by_cut_type = carat_cut.groupby(['cut']).mean()
"""


df['size'] = round((df.x * df.y * df.z) , 2)

"""
df.sort_values(by=['price'], inplace=True, ascending=False)
print(df2.price.median())
"""
df['Expensive'] = df.price.apply(lambda x: 'Yes' if x > 2000 else 'No')


#print(list(df.axes[1]))
"""
big_expensive = df[(df.size > 25) & (df.Expensive == 'Yes')]
print(big_expensive.head())
print(len(big_expensive))
"""

rows5 = df.iloc[:5]
rows5.to_csv('/Users/Nayeem/Desktop/WORKING/rows5.csv', sep=',', index=False)
df10 = pd.read_csv('/Users/Nayeem/Desktop/WORKING/rows5.csv')

print(df10)
